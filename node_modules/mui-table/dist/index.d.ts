import React from 'react';
import { TableProps } from '@material-ui/core/Table';
import { TableBodyProps } from '@material-ui/core/TableBody';
import { TableCellProps } from '@material-ui/core/TableCell';
import { TableHeadProps } from '@material-ui/core/TableHead';
import { TablePaginationProps } from '@material-ui/core/TablePagination';
import { TableRowProps } from '@material-ui/core/TableRow';
import { getHeaders, getColumns } from './utils';
declare type ResolvePropType<T, TData> = T | ((obj: {
    rowData: TData;
    column: ColumnDef<TData>;
}) => T | void);
export declare const useStyles: (props?: any) => Record<"container" | "tableWrapper" | "cellSelected" | "cellHovered", string>;
export declare type ColumnDef<TData = any> = {
    name: string;
    header?: string | React.ReactNode;
    cell?: (data: TData, index: number) => React.ReactNode;
    cellProps?: ResolvePropType<TableCellProps, TData>;
    onClick?: TableCellProps['onClick'];
    onHeaderClick?: boolean | ((obj: {
        column: ColumnDef<TData>;
    }) => void);
    headerCellProps?: TableCellProps;
    bodyCellProps?: TableCellProps;
    orderBy?: string | boolean | ((a: any, b: any) => number);
    columns?: ColumnDef<TData>[];
};
export declare type MuiTableProps<TData = any> = {
    data: TData[] | null;
    columns: ColumnDef<TData>[];
    bodyProps?: TableBodyProps;
    containerProps?: any;
    includeHeaders?: boolean;
    headerProps?: TableHeadProps;
    rowProps?: ResolvePropType<TableRowProps, TData>;
    headerRowProps?: ResolvePropType<TableRowProps, TData>;
    headerCellProps?: ResolvePropType<TableCellProps, TData>;
    bodyRowProps?: ResolvePropType<TableRowProps, TData>;
    bodyCellProps?: ResolvePropType<TableCellProps, TData>;
    cellProps?: ResolvePropType<TableCellProps, TData>;
    onHeaderClick?: (obj: {
        column: ColumnDef<TData>;
    }) => void;
    onCellClick?: (obj: {
        rowData: TData;
        column: ColumnDef<TData>;
    }) => void;
    orderBy?: string;
    orderDirection?: 'asc' | 'desc';
    pagination?: TablePaginationProps;
    addPlaceholderRows?: boolean;
    tableWrapperProps?: React.HTMLAttributes<HTMLDivElement>;
    isCellHovered?: (obj: {
        column: ColumnDef<TData>;
        rowData: TData | null;
        hoveredColumn: ColumnDef<TData> | null;
        hoveredRowData: TData | null;
    }) => boolean;
    isCellSelected?: (obj: {
        column: ColumnDef<TData>;
        rowData: TData | null;
    }) => boolean;
    classes?: {
        container?: string;
        tableWrapper?: string;
        cellHovered?: string;
        cellSelected?: string;
    };
} & TableProps;
declare function MuiTable<T = any>(props: MuiTableProps<T>): JSX.Element;
export { getHeaders, getColumns };
declare const _default: typeof MuiTable;
export default _default;
