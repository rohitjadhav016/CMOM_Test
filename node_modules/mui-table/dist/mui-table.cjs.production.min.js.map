{"version":3,"file":"mui-table.cjs.production.min.js","sources":["../src/utils.tsx","../src/index.tsx"],"sourcesContent":["import * as deepmerge from 'deepmerge';\nimport { ColumnDef } from './index';\n\ntype ColumnDefHeader = ColumnDef & {\n  colSpan?: number;\n  rowSpan?: number;\n};\n\nexport function getHeaders(columns: ColumnDef[]) {\n  const maxDepth = getDepth(columns);\n  const result: ColumnDefHeader[][] = Array.from({\n    length: maxDepth,\n  }).map(() => []);\n\n  function addItems(columns: ColumnDef[], depth: number) {\n    columns.forEach(column => {\n      const columnDef: ColumnDefHeader = {\n        ...column,\n      };\n      delete columnDef.columns;\n\n      if (column.columns) {\n        const colSpan = getWidth(column);\n        if (colSpan > 1) {\n          columnDef.colSpan = colSpan;\n        }\n        addItems(column.columns, depth + 1);\n      } else {\n        const rowSpan = maxDepth - depth;\n        if (rowSpan > 1) {\n          columnDef.rowSpan = maxDepth - depth;\n        }\n      }\n      result[depth].push(columnDef);\n    });\n  }\n  addItems(columns, 0);\n\n  return result;\n}\n\nexport function getColumns(columns: ColumnDef[]) {\n  const result: ColumnDef[] = [];\n\n  function setColumns(column: ColumnDef) {\n    if (column.columns == null) {\n      result.push(column);\n      return;\n    }\n\n    column.columns.forEach(child => setColumns(child));\n  }\n  columns.forEach(column => setColumns(column));\n\n  return result;\n}\n\nexport function getDepth(columns: ColumnDef[] | undefined) {\n  if (columns == null) {\n    return 0;\n  }\n\n  let depth = 0;\n  columns.forEach(item => {\n    depth = Math.max(depth, getDepth(item.columns));\n  });\n\n  return depth + 1;\n}\n\nexport function getWidth(column: ColumnDef) {\n  if (column.columns == null) {\n    return 1;\n  }\n\n  let width = 0;\n  column.columns.forEach(child => {\n    width += getWidth(child);\n  });\n\n  return width;\n}\n\nexport function isNil(obj: any) {\n  return obj == null;\n}\n\nexport function merge(...objects: any[]) {\n  const [firstObj] = objects;\n  const destination = isNil(firstObj) ? {} : firstObj;\n  const existingObjects = objects.filter(source => !isNil(source));\n  const sources = [destination].concat(existingObjects);\n\n  return deepmerge.all(sources);\n}\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table, { TableProps } from '@material-ui/core/Table';\nimport TableBody, { TableBodyProps } from '@material-ui/core/TableBody';\nimport TableCell, { TableCellProps } from '@material-ui/core/TableCell';\nimport TableHead, { TableHeadProps } from '@material-ui/core/TableHead';\nimport TablePagination, {\n  TablePaginationProps,\n} from '@material-ui/core/TablePagination';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\nimport { getHeaders, getColumns, merge } from './utils';\n\ntype ResolvePropType<T, TData> =\n  | T\n  | ((obj: { rowData: TData; column: ColumnDef<TData> }) => T | void);\n\nfunction resolveProp<T, TData>(\n  prop: ResolvePropType<T, TData> | undefined,\n  args: any\n) {\n  return prop instanceof Function ? prop(args) : prop;\n}\n\nexport const useStyles = makeStyles(theme => ({\n  container: {},\n  tableWrapper: {},\n  cellSelected: {\n    backgroundColor: theme.palette.grey[100],\n  },\n  cellHovered: {\n    backgroundColor: theme.palette.grey[200],\n  },\n}));\n\nexport type ColumnDef<TData = any> = {\n  name: string;\n  header?: string | React.ReactNode;\n  cell?: (data: TData, index: number) => React.ReactNode;\n  cellProps?: ResolvePropType<TableCellProps, TData>;\n  onClick?: TableCellProps['onClick'];\n  onHeaderClick?: boolean | ((obj: { column: ColumnDef<TData> }) => void);\n  headerCellProps?: TableCellProps;\n  bodyCellProps?: TableCellProps;\n  orderBy?: string | boolean | ((a: any, b: any) => number);\n  columns?: ColumnDef<TData>[];\n};\n\nexport type MuiTableProps<TData = any> = {\n  data: TData[] | null;\n  columns: ColumnDef<TData>[];\n  bodyProps?: TableBodyProps;\n  containerProps?: any;\n  includeHeaders?: boolean;\n  headerProps?: TableHeadProps;\n  rowProps?: ResolvePropType<TableRowProps, TData>;\n  headerRowProps?: ResolvePropType<TableRowProps, TData>;\n  headerCellProps?: ResolvePropType<TableCellProps, TData>;\n  bodyRowProps?: ResolvePropType<TableRowProps, TData>;\n  bodyCellProps?: ResolvePropType<TableCellProps, TData>;\n  cellProps?: ResolvePropType<TableCellProps, TData>;\n  onHeaderClick?: (obj: { column: ColumnDef<TData> }) => void;\n  onCellClick?: (obj: { rowData: TData; column: ColumnDef<TData> }) => void;\n  orderBy?: string;\n  orderDirection?: 'asc' | 'desc';\n  pagination?: TablePaginationProps;\n  addPlaceholderRows?: boolean;\n  tableWrapperProps?: React.HTMLAttributes<HTMLDivElement>;\n\n  isCellHovered?: (obj: {\n    column: ColumnDef<TData>;\n    rowData: TData | null;\n    hoveredColumn: ColumnDef<TData> | null;\n    hoveredRowData: TData | null;\n  }) => boolean;\n  isCellSelected?: (obj: {\n    column: ColumnDef<TData>;\n    rowData: TData | null;\n  }) => boolean;\n  classes?: {\n    container?: string;\n    tableWrapper?: string;\n    cellHovered?: string;\n    cellSelected?: string;\n  };\n} & TableProps;\n\nfunction MuiTable<T = any>(props: MuiTableProps<T>) {\n  const {\n    data,\n    columns,\n\n    containerProps,\n    tableWrapperProps,\n    headerProps,\n    bodyProps,\n\n    rowProps,\n    headerRowProps,\n    bodyRowProps,\n\n    cellProps: defaultCellProps,\n    headerCellProps: defaultHeaderCellProps,\n    bodyCellProps: defaultBodyCellProps,\n\n    includeHeaders,\n    onHeaderClick,\n    onCellClick,\n    isCellHovered,\n    isCellSelected,\n    pagination,\n    addPlaceholderRows,\n    orderBy,\n    orderDirection,\n\n    ...tableProps\n  } = props;\n\n  const [state, setState] = useState<{\n    hoveredColumn: ColumnDef | null;\n    hoveredRowData: T | null;\n  }>({\n    hoveredColumn: null,\n    hoveredRowData: null,\n  });\n  const classes = useStyles();\n\n  const { hoveredColumn, hoveredRowData } = state;\n\n  return (\n    <div className={classes.container} {...containerProps}>\n      <div className={classes.tableWrapper} {...tableWrapperProps}>\n        <Table {...tableProps}>\n          {includeHeaders && (\n            <TableHead {...headerProps}>\n              {getHeaders(columns).map((headerRow, headerRowIndex) => (\n                <TableRow\n                  {...resolveProp(rowProps, {\n                    column: null,\n                    rowData: null,\n                    hoveredColumn,\n                    hoveredRowData,\n                  })}\n                  {...resolveProp(headerRowProps, {\n                    column: null,\n                    rowData: null,\n                    hoveredColumn,\n                    hoveredRowData,\n                  })}\n                  key={`header-row-${headerRowIndex}`}\n                >\n                  {headerRow &&\n                    headerRow.map((column, _columnIndex) => {\n                      const contents = column.header || column.name;\n\n                      const isHovered =\n                        hoveredColumn &&\n                        hoveredRowData &&\n                        isCellHovered &&\n                        isCellHovered({\n                          column,\n                          rowData: null,\n                          hoveredColumn,\n                          hoveredRowData,\n                        });\n\n                      const isSelected =\n                        isCellSelected &&\n                        isCellSelected({ column, rowData: null });\n\n                      const className = clsx({\n                        [classes.cellHovered]: isHovered,\n                        [classes.cellSelected]: isSelected,\n                      });\n\n                      const cellProps = merge(\n                        {},\n                        { className },\n                        resolveProp(defaultCellProps, {\n                          column,\n                          rowData: null,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(column.cellProps, {\n                          column,\n                          rowData: null,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(defaultHeaderCellProps, {\n                          column,\n                          rowData: null,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(column.headerCellProps, {\n                          column,\n                          rowData: null,\n                          hoveredColumn,\n                          hoveredRowData,\n                        })\n                      );\n\n                      return (\n                        <TableCell\n                          {...(isCellHovered && {\n                            onMouseEnter: () => {\n                              setState({\n                                hoveredColumn: column,\n                                hoveredRowData: null,\n                              });\n                            },\n                            onMouseLeave: () =>\n                              setState({\n                                hoveredColumn: null,\n                                hoveredRowData: null,\n                              }),\n                          })}\n                          key={`header-cell-${column.name}`}\n                          colSpan={column.colSpan}\n                          rowSpan={column.rowSpan}\n                          {...cellProps}\n                        >\n                          {column.orderBy !== false &&\n                          column.onHeaderClick !== false &&\n                          (column.onHeaderClick || onHeaderClick) ? (\n                            <TableSortLabel\n                              active={\n                                orderBy === column.name ||\n                                orderBy === column.orderBy\n                              }\n                              style={{ width: 'inherit' }} // fix text overflowing\n                              direction={orderDirection}\n                              onClick={() =>\n                                typeof column.onHeaderClick === 'function'\n                                  ? column.onHeaderClick({ column })\n                                  : onHeaderClick?.({ column })\n                              }\n                            >\n                              {contents}\n                            </TableSortLabel>\n                          ) : (\n                            contents\n                          )}\n                        </TableCell>\n                      );\n                    })}\n                </TableRow>\n              ))}\n            </TableHead>\n          )}\n\n          <TableBody {...bodyProps}>\n            {data &&\n              data.map((rowData, rowIndex) => {\n                return (\n                  <TableRow\n                    key={`body-row-${rowIndex}`}\n                    {...resolveProp(rowProps, {\n                      column: null,\n                      rowData,\n                      hoveredColumn,\n                      hoveredRowData,\n                    })}\n                    {...resolveProp(bodyRowProps, {\n                      column: null,\n                      rowData,\n                      hoveredColumn,\n                      hoveredRowData,\n                    })}\n                  >\n                    {getColumns(columns).map((column, _columnIndex) => {\n                      const contents = column.cell\n                        ? column.cell(rowData, rowIndex)\n                        : // @ts-ignore: add index signature\n                          rowData[column.name];\n\n                      const isHovered =\n                        hoveredColumn &&\n                        hoveredRowData &&\n                        isCellHovered &&\n                        isCellHovered({\n                          column,\n                          rowData,\n                          hoveredColumn,\n                          hoveredRowData,\n                        });\n\n                      const isSelected =\n                        isCellSelected && isCellSelected({ column, rowData });\n\n                      const className = clsx({\n                        [classes.cellHovered]: isHovered,\n                        [classes.cellSelected]: isSelected,\n                      });\n\n                      const cellProps = merge(\n                        {},\n                        { className },\n                        resolveProp(defaultCellProps, {\n                          column,\n                          rowData,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(column.cellProps, {\n                          column,\n                          rowData,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(defaultBodyCellProps, {\n                          column,\n                          rowData,\n                          hoveredColumn,\n                          hoveredRowData,\n                        }),\n                        resolveProp(column.bodyCellProps, {\n                          column,\n                          rowData,\n                          hoveredColumn,\n                          hoveredRowData,\n                        })\n                      );\n\n                      return (\n                        <TableCell\n                          style={{\n                            ...((onCellClick || column.onClick) && {\n                              cursor: 'pointer',\n                            }),\n                          }}\n                          {...(isCellHovered && {\n                            onMouseEnter: () => {\n                              setState({\n                                hoveredColumn: column,\n                                hoveredRowData: rowData,\n                              });\n                            },\n                            onMouseLeave: () =>\n                              setState({\n                                hoveredColumn: null,\n                                hoveredRowData: null,\n                              }),\n                          })}\n                          {...(onCellClick && {\n                            onClick: () => {\n                              if (window.getSelection()?.toString() === '') {\n                                onCellClick({ column, rowData }); // Can be overridden by cellProps.onClick on column definition\n                              }\n                            },\n                          })}\n                          key={`body-cell-${rowIndex}-${column.name}`}\n                          {...cellProps}\n                        >\n                          {contents}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              })}\n\n            {/* Fill remaining space to keep pagination controls in consistent location */}\n            {pagination &&\n              addPlaceholderRows &&\n              pagination.rowsPerPage > (data ? data.length : 0) &&\n              Array.from({\n                length: pagination.rowsPerPage - (data ? data.length : 0),\n              }).map((rowData, rowIndex) => (\n                <TableRow\n                  {...resolveProp(rowProps, {\n                    column: null,\n                    rowData,\n                    hoveredColumn,\n                    hoveredRowData,\n                  })}\n                  {...resolveProp(bodyRowProps, {\n                    column: null,\n                    rowData,\n                    hoveredColumn,\n                    hoveredRowData,\n                  })}\n                  key={`body-row-placeholder-${rowIndex}`}\n                >\n                  {columns.map(column => {\n                    const cellProps: any = merge(\n                      {},\n                      resolveProp(defaultCellProps, {\n                        column,\n                        rowData,\n                        hoveredColumn,\n                        hoveredRowData,\n                      }),\n                      resolveProp(column.cellProps, {\n                        column,\n                        rowData,\n                        hoveredColumn,\n                        hoveredRowData,\n                      }),\n                      resolveProp(defaultBodyCellProps, {\n                        column,\n                        rowData,\n                        hoveredColumn,\n                        hoveredRowData,\n                      }),\n                      resolveProp(column.bodyCellProps, {\n                        column,\n                        rowData,\n                        hoveredColumn,\n                        hoveredRowData,\n                      })\n                    );\n\n                    cellProps.style = {\n                      ...cellProps.style,\n                      visibility: 'hidden',\n                    };\n\n                    return (\n                      <TableCell\n                        style={{ visibility: 'hidden' }}\n                        key={`body-cell-placeholder-${rowIndex}-${column.name}`}\n                        {...cellProps}\n                      >\n                        &nbsp;\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              ))}\n          </TableBody>\n        </Table>\n      </div>\n      {pagination && (\n        // @ts-ignore - `component` explicitly omitted from props but allowed (https://github.com/mui-org/material-ui/commit/8dc12394addced6c1ae34e0a05a3a799efe4ca6c#diff-33ba99dbf7e0ca4f0d9c07e27849f8d3R47)\n        <TablePagination component=\"div\" {...pagination} />\n      )}\n    </div>\n  );\n}\n\nexport { getHeaders, getColumns };\n\n// export default MuiTable;\n// Workaround: Generic Props lost with React memo - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37087#issuecomment-542793243\n// export default React.memo(MuiTable);\nconst typedMemo: <T>(c: T) => T = React.memo;\nexport default typedMemo(MuiTable);\n"],"names":["getHeaders","columns","maxDepth","getDepth","depth","forEach","item","Math","max","result","Array","from","length","map","addItems","column","columnDef","colSpan","getWidth","width","child","rowSpan","push","getColumns","setColumns","isNil","obj","merge","objects","firstObj","destination","existingObjects","filter","source","sources","concat","deepmerge","resolveProp","prop","args","Function","useStyles","makeStyles","theme","container","tableWrapper","cellSelected","backgroundColor","palette","grey","cellHovered","MuiTable","props","data","containerProps","tableWrapperProps","headerProps","bodyProps","rowProps","headerRowProps","bodyRowProps","defaultCellProps","cellProps","defaultHeaderCellProps","headerCellProps","defaultBodyCellProps","bodyCellProps","includeHeaders","onHeaderClick","onCellClick","isCellHovered","isCellSelected","pagination","addPlaceholderRows","orderBy","orderDirection","tableProps","useState","hoveredColumn","hoveredRowData","state","setState","classes","React","className","Table","TableHead","headerRow","headerRowIndex","TableRow","rowData","key","_columnIndex","contents","header","name","isHovered","isSelected","clsx","TableCell","onMouseEnter","onMouseLeave","TableSortLabel","active","style","direction","onClick","TableBody","rowIndex","cell","cursor","window","getSelection","toString","rowsPerPage","visibility","TablePagination","component","typedMemo","memo"],"mappings":"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"}